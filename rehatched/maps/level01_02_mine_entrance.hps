//////////////////////
/*CALLBACK FUNCTIONS*/

/////////////////////
//START INTRO SCENE//
//---- AUDIO STORY FALLING DOWN------------
void FallScene1(string asTimer)
{
	SetPlayerActive(false);
	
	PlayGameMusic("mine_intro",0.8,1,false,5);
	
	RunAfter(15.0f, "FallScene2");
	RunAfter(13.5f, "FallWhipersScene2");
}
void FallWhipersScene2(string asTimer) //not really needed
{
	PlayGuiSound("horror_1_whisper_entrance", 0.7f);
}
void FallScene2(string asTimer)
{
	FadeInSoundEntity("ambient1", 0.1);
	FadeInSoundEntity("wind1", 0.1);
}
//---- RISING AFTER FALL -------------
void LookScene1(string asTimer)
{
	FadeIn(1);
	StartPlayerLookAt("look2",1, 1.2f);
	
	SetDepthOfFieldActive(false,1.6f);
	
	PlayGameMusic("penumbra_music_E1_C4",0.9f,0.1,false,7);
	
	RunAfter(1.6f, "LookScene2");
}
void LookScene2(string asTimer)
{
	StartPlayerLookAt("look1",0.8, 0.7f);
	
	SetDepthOfFieldActive(true,0.2f);
	SetupDepthOfField(0,0.1,0.2);
	
	RunAfter(1.1f, "LookScene3");
}
void LookScene3(string asTimer)
{
	StartPlayerLookAt("look2",0.2f, 4.4f);
	
	SetDepthOfFieldActive(false,1.2f);
	
	SetPlayerPose("Stand", false);
	
	RunAfter(1.6f, "LookScene4");
}
void LookScene4(string asTimer)
{
	StopPlayerLookAt();

	SetPlayerActive(true);
	
	AddSubTitleTrans("01_02_mine_entrance", "SceneIntro", 6);
	
	AutoSave();
}
//STOP INTRO SCENE//
////////////////////


/////////////////////
//START LOCKED DOOR//

void OpenLockedDoor()
{
	SetDoorLocked("wooddoor1", false);
	RemoveNotebookTask("TaskDoor");
	RemoveEntityCallback("PlayerInteract","wooddoor1");
	SetGameEntityActive("lockarea",false);
}

void LeaveLockArea(string asParent, string asChild)
{
	OpenLockedDoor();
}

void BreakLockBarrel(string asEntity)
{
	OpenLockedDoor();	
}

//STOP LOCKED DOOR//
////////////////////


////////////////////////////
//START INTERACT WOOD DOOR//
void InteractWoodDoor01(string asEntity)
{
	RunAfter(0.7f, "DelayMessage01");
	
	PlayGuiSound("interact_closed_door_old", 0.4f);
	
	RemoveEntityCallback("PlayerInteract","wooddoor1");
	
	SetGameEntityDescription("wooddoor1","");
}
void DelayMessage01(string asTimer)
{
	AddSubTitleTrans("01_02_mine_entrance", "InteractWoodenDoor", 3.5f);
	AddNotebookTask("TaskDoor", "01_02_mine_entrance","TaskLockedDoor");
}
//STOP INTERACT WOOD DOOR//
///////////////////////////


/////////////////////
//START WOOD PLANKS//
void InteractPlanks01(string asEntity)
{
	RunAfter(0.3f, "DelayPlanks01");
	
	RemoveEntityCallback("PlayerInteract","planks1");
}
void DelayPlanks01(string asTimer)
{
	AddSubTitleTrans("01_02_mine_entrance", "InteractPlanks", 3.5f);
	AddNotebookTask("TaskPlanks", "01_02_mine_entrance","TaskPlanks");
}
void PlanksBreak01(string asEntity)
{
	RemoveNotebookTask("TaskPlanks");
	
	//Skip this HINT since we are getting rid of simple swing.
	//AddSubTitleTrans("01_02_mine_entrance","TutorialHammer05", 13.0f);	
}
//STOP WOOD PLANKS//
////////////////////


////////////////
//START RUMBLE//
void EnterRumbleArea(string asParent, string asChild)
{
	RunAfter(2.4, "RumbleEvent");
	
	SetGameEntityActive("rumblearea",false);
}
void RumbleEvent(string asTimer)
{
	PlaySoundEntity("rumble1", false);
	
	StartScreenShake(0.01f, 0.2,0.8,0.4);
	
	RunAfter(14.8, "RumbleEvent2");
}
void RumbleEvent2(string asTimer)
{
	PlaySoundEntity("rumble2", false);
	StartScreenShake(0.007f, 0.2,0.8,0.4);
}
//STOP RUMBLE//
///////////////

void RodToolCombo(string asEntity, string asItem)
{
	SetGameEntityActive("htstatic",false);
	SetGameEntityActive("ht",true);
	
	PlayGuiSound("interact_instert_rod", 1);
	
	RemoveItem("steelrod");
	
	RemoveNotebookTask("TaskDoor");
	
	AutoSave();
}


//////////////////
//START END AREA//
/*Can either interact or jump into the hole to end level*/
void EndAreaInteract01(string asEntity)
{
	ChangeMap(	"level01_03_shafts.dae", //New map
			"link01", //Positon on new map
			"","door_metal_close", //Stop and end sound.
			0.5f , 0.5f,//Fade out and in time (seconds).
			"LoadTexts", "01_02_to_01_03"); //Load text (cat and entry)
}
void EndAreaEnter01(string asParent, string asChild)
{
	ChangeMap(	"level01_03_shafts.dae", //New map
			"link01", //Positon on new map
			"","door_metal_close", //Stop and end sound.
			0.5f , 0.5f,//Fade out and in time (seconds).
			"LoadTexts", "01_02_to_01_03"); //Load text (cat and entry)
}
//STOP END AREA//
/////////////////


////////////////
//START HAMMER//
void PickHammer(string asItem)
{	
	AddMessage(
		Translate("01_02_mine_entrance", "TutorialHammer01") 
		+ GetActionKeyString("Interact") 
		+ Translate("01_02_mine_entrance", "TutorialHammer02")
	);
			
	AddMessage(
		Translate("01_02_mine_entrance", "TutorialHammer03") 
		+ GetActionKeyString("Examine")
		+ Translate("01_02_mine_entrance", "TutorialHammer04")
	);
}

//STOP HAMMER//
//////////////


/////////////////////
//START SCARE EVENT//
void ScareEvent01(string asParent, string asChild)
{
	if(GetLocalVar("doscare") == 1)
	{
		CreateSoundEntityAt("Entity","eventscareeffect2","scaresound1","mine_entrance_growlbang");
		RunAfter(0.15f, "ScareEvent02");
		RemoveEntityCollideCallback("Enter","Player","eventscare");
	}
}
void ScareEvent02(string asTimer)
{
	CreateParticleSystem("scaredust1", "particle_expl_dust_small", "eventscareeffect1",1,1,1);
	StartScreenShake(0.05f, 0.05,0.5,0.1);
	RunAfter(1.6f, "PlayerBreath01");	
	RunAfter(0.8f, "ScareEvent03");
}
void ScareEvent03(string asTimer)
{
	CreateSoundEntityAt("Entity","eventscareeffect1","scaresound2","mine_entrance_growlbang");
	RunAfter(0.15f, "ScareEvent04");	
}
void ScareEvent04(string asTimer)
{
	CreateParticleSystem("scaredust2", "particle_expl_dust_small", "eventscareeffect2",1,1,1);
	RunAfter(1.4f, "PlayerBreath02");	
	RunAfter(1.5f, "MoveAway01");
	StartScreenShake(0.05f, 0.05,0.5,0.1);	
}
void PlayerBreath01(string asTimer)
{
	PlayGuiSound("player_scare_high", 0.7f);
}
void PlayerBreath02(string asTimer)
{
	PlayGuiSound("player_scare_high", 0.3f);
}
void MoveAway01(string asTimer)
{
	CreateSoundEntityAt("Entity","eventscareeffect3","scaresound3","mine_entrance_growl");
	StartScreenShake(0.01f, 0.5,1,0.5);
	RunAfter(3, "MoveAway02");
}
void MoveAway02(string asTimer)
{
	StartScreenShake(0.005f, 0.5,1,0.5);
	CreateSoundEntityAt("Entity","eventscareeffect4","scaresound4","mine_entrance_growl_away");
}
//STOP SCARE EVENT//
////////////////////


//START LOCKED DOOR REMOVE DESC//
void RemoveDoorDesc(string asParent, string asChild)
{
	SetGameEntityDescriptionOnceTrans("wooddoor1","","");
}


//////////////////////////////////////////////////////////
/*This function is run the FIRST time the map is loaded */
void OnStart()
{
	//---- MAP INIT ------------
	SetMapGameNameTrans("SaveNames","level01_02_mine_entrance");
	SetGlobalVar("mine_entrance_visited",1);
	
	
	//---- AREA INIT ------------
	//As the barrel is moved the door can be opened.
	AddEntityCollideCallback("Leave","lockbarrel","lockarea","LeaveLockArea");
	AddEntityCallback("OnBreak","lockbarrel","BreakLockBarrel");
	//Play couple of random rumbles in tunnel
	AddEntityCollideCallback("Enter","Player","rumblearea","EnterRumbleArea");
	//Enters exit area
	AddEntityCollideCallback("Enter","Player","endarea","EndAreaEnter01");
	//Enters scare area
	AddEntityCollideCallback("Enter","Player","eventscare","ScareEvent01");
	//Enters remove desc for door
	AddEntityCollideCallback("Enter","Player","removedesc","RemoveDoorDesc");
	
	SetAreaCustomIcon("endarea", "DoorLink");

	
	//---- AUDIO INIT ------------
	StopSoundEntity("rumble1",false);
	StopSoundEntity("rumble2",false);
	
	StopSoundEntity("ambient1",false);
	StopSoundEntity("wind1",false);
	
	PreloadSound("mine_entrance_growl.snt");
	PreloadSound("mine_entrance_growl_away.snt");
	PreloadSound("mine_entrance_growlbang.snt");
	PreloadSound("horror_1_whisper_entrance");
	
	
	//---- ENTITY INIT ------------
	SetDoorLocked("wooddoor1", true);
	AddBodyImpulse("wooddoor2_minedoorShape", "world" ,-2,0,0);
	
	CreateParticleSystem("scaredusthide1", "particle_mist", "eventscareeffect3",1,1,1);
	CreateParticleSystem("scaredusthide2", "particle_mist_thick", "eventscareeffect4",1,1,1);
	
	
	//---- INTERACT INIT ----------------------
	AddEntityCallback("PlayerInteract","wooddoor1","InteractWoodDoor01");
	AddEntityCallback("PlayerInteract","planks1","InteractPlanks01");
	AddEntityCallback("PlayerInteract","endarea","EndAreaInteract01");
	AddEntityCallback("OnBreak","planks1","PlanksBreak01");
	
	AddUseCallback("steelrod", "htstatic", "RodToolCombo");
	
	SetGameEntityActive("ht",false);
	//SetGameEntityActive("htstatic",false);
	SetGameEntityActive("endarea",false);
	
	AddPickupCallback("hammer", "PickHammer");
	
	
	//---- PLAYER INIT ------------
	SetPlayerActive(false);
	SetPlayerPose("Crouch", true);
	
	FadeOut(0);
	StartPlayerLookAt("look1",100, 0.001f);
	
	SetDepthOfFieldActive(true,0);
	SetupDepthOfField(0,0.1,0.2);
	
	RunAfter(0.1f, "FallScene1");
	RunAfter(19.1f, "LookScene1");
	
	
	//---- TEXT INIT ------------
	SetGameEntityDescriptionOnceTrans("hatchdesc","01_02_mine_entrance","DescHatch");
	for(int i=1;i<=6;i++)
		SetGameEntityDescriptionOnceTrans("barrel"+i,"01_02_mine_entrance","DescBarrel");
	SetGameEntityDescriptionOnceTrans("lockbarrel","01_02_mine_entrance","DescLockBarrel");
	SetGameEntityDescriptionOnceTrans("wooddoor1","01_02_mine_entrance","DescWoodDoor1");
	SetGameEntityDescriptionOnceTrans("wooddoor2","01_02_mine_entrance","DescWoodDoor2");
	SetGameEntityDescriptionOnceTrans("metalshelf1","01_02_mine_entrance","DescMetalShelf1");
	SetGameEntityDescriptionOnceTrans("descareashelf1","01_02_mine_entrance","DescShelf1");
	SetGameEntityDescriptionOnceTrans("planks1","01_02_mine_entrance","DescPlanks1");
	SetGameEntityDescriptionOnceTrans("hatch","01_02_mine_entrance","DescLargeHatch");
	SetGameEntityDescriptionOnceTrans("htstatic","01_02_mine_entrance","DescHatchToolStatic");
	SetGameEntityDescriptionOnceTrans("ht","01_02_mine_entrance","DescHatchTool");
	SetGameEntityDescriptionOnceTrans("endarea","01_02_mine_entrance","DescEndArea");
	
	SetGameEntityDescriptionOnceTrans("descammobox1","01_02_mine_entrance","DescAmmoBox");
	SetGameEntityDescriptionOnceTrans("descammobox2","01_02_mine_entrance","DescAmmoBox");
	SetGameEntityDescriptionOnceTrans("descshelf1","01_02_mine_entrance","DescOldShelfs");
	SetGameEntityDescriptionOnceTrans("descshelf2","01_02_mine_entrance","DescOldShelfs");
	for(int i=1;i<=4;i++)
		SetGameEntityDescriptionOnceTrans("mration0"+i,"01_02_mine_entrance","DescRation");
	
	
	//---- VARIABLE INIT ------------
	//TEMP STUFF
	CreateLocalVar("move", 1);
	CreateLocalVar("move2", 0);
	CreateLocalVar("endcheck", 0);
	CreateLocalVar("doscare", 0);
}	


/////////////////////////////////////////////////////
/*This function is run everytime the map is loaded */
void OnLoad()
{
	//---- LEVEL SETUP ------------	
	SetAmbientColor(0.1,0.1,0.1);
	
	PlayGameMusic("penumbra_music_E1_A2",0.8,0.1,true,0);
}

float gfLastAngle = -1;

///////////////////////////////////////
/*This function is run 60 times a sec*/
void OnUpdate()
{
	//HATCH MACHINE
	float fAngle = GetJointProperty("ht_joint1", "Angle");
	
	if(fAngle != gfLastAngle)
	{
		gfLastAngle = fAngle;
		float fT = -fAngle / 175;
		SetJointControllerPropertyFloat("hatch_joint1","HoldPos","DestValue",fT * 1.85);
		
		if(fT > 0.35)
		{
			SetGameEntityActive("endarea",true);
			
			SetLocalVar("doscare", 0);
		}
		else
		{
			SetGameEntityActive("endarea",false);
			
			SetLocalVar("doscare", 1);
		}
	}
}

/////////////////////////////////////////////////////
/*This function is run everytime the map is unloaded */
void OnExit()
{
	RemoveNotebookTask("TaskDoor"); //Incase player never touches door before attaching rod.
}