// Copyright 2006-2010 (C) - Frictional Games
//
// This file is part of HPL1 Engine
//
// For conditions of distribution and use, see copyright notice in LICENSE-shaders
//

///////////////////////////////////////////////////////
/// DIFFUSE LIGHTING VERTEX PROGRAM ////////////
///////////////////////////////////////////////////////


void main(	float4 position : POSITION,
			float3 normal : NORMAL,
			float3 uv	   : TEXCOORD0,
			float4 tangent : TEXCOORD1,
					  
			out float4 oPosition	: POSITION,
			out float4 oLightColor	: COLOR0,
			out float3 oUv	: TEXCOORD0,
			out float3 oLightDir	: TEXCOORD1,
			//For specular
			//out float3 oHalfVec		: TEXCOORD2,
						  
			uniform float4x4 worldViewProj,
			//For specular
			//uniform float3 EyePos,
			uniform float3 LightPos,
			uniform float4 LightColor,
			uniform float3 LightDirMul)
{
	oPosition = mul(worldViewProj, position);

	oUv = uv;
		
	float3 lightDir = LightPos - position.xyz;
	oLightDir = lightDir * LightDirMul;

	//Calculate rotation for light to get it to tangent space.
	float3 binormal = cross(normal,tangent.xyz)*tangent.w;
	float3x3 rotation = float3x3(tangent.xyz, binormal, normal);
	
	
	//Transform the lightdir
	oLightDir = mul(rotation, oLightDir);
	

	//For Specular
	//oHalfVec = EyePos - position.xyz;
	//oHalfVec = normalize( normalize(EyePos) +  normalize(lightDir));

    oLightColor = LightColor;
}

/*void main(	float4 position : POSITION,
			float3 normal : NORMAL,
			float3 uv	  : TEXCOORD0,
		   	float3 tangent	  : TEXCOORD1,
		   			  
			out float4 oPosition	: POSITION,
			out float4 oLightColor	: COLOR0,
			out float3 oLightDir	: TEXCOORD0,
						  
			uniform float4x4 worldViewProj,
			uniform float3 LightPos,
			uniform float4 LightColor,
			uniform float LightRadius)
{
	//Get the direction of the light and normalize it
	float3 lightDir = LightPos - position.xyz;
		
	oPosition = mul(worldViewProj, position);

	//Calculate rotation for light to get it to tangent space.
	float3 binormal = cross(tangent, normal);
	float3x3 rotation = float3x3(tangent, binormal, normal);
	
	//Transform the lightdir
	lightDir = mul(rotation, lightDir);
		
	//Pack the light between 0 and 1 and set as color
	oLightDir = normalize(lightDir);//((lightDir / LightRadius)+1)*0.5;

	oLightColor = LightColor;
}*/
