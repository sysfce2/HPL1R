// Copyright 2006-2010 (C) - Frictional Games
//
// This file is part of HPL1 Engine
//
// For conditions of distribution and use, see copyright notice in LICENSE-shaders
//

///////////////////////////////////////////////////////
/// DIFFUSE COLOR SPOTLIGHTING FRAGMENT PROGRAM /////////////
///////////////////////////////////////////////////////

void main(half4 pos : POSITION, //in projection space
		  half4 lightColor		: COLOR0,
		  half2 uv				: TEXCOORD0,
		  half3 lightDir		: TEXCOORD1,
		  half3 halfVec			: TEXCOORD2,
		  float3 spotlightUv	: TEXCOORD3,
		              
		  out half4 oColor : COLOR,
          
		  uniform sampler2D diffuseMap			: TEXUNIT0,
		  uniform sampler2D normalMap			: TEXUNIT1,
		  uniform samplerCUBE normalCubeMap		: TEXUNIT2,
		  uniform sampler1D  falloffMap			: TEXUNIT3,
		  uniform sampler2D  spotlightMap		: TEXUNIT4,
		  uniform sampler1D  spotNegRejectMap	: TEXUNIT5,
		  uniform sampler2D  specularMap		: TEXUNIT6
		  )
{
	half3 diffuse =		tex2D(diffuseMap, uv).xyz;
	
	half3 bumpVec =		(2*tex2D(normalMap, uv)-1).xyz;
	half3 lightVec=		normalize(lightDir);
	halfVec =			normalize(halfVec);
    
	half  attenuation =	tex1D(falloffMap,dot(lightDir,lightDir)).x;
	half4 spotColor =	tex2Dproj(spotlightMap, spotlightUv);
	half  rejectNeg =	tex1D(spotNegRejectMap,spotlightUv.z + 0.5).x;

	half specular = saturate(dot(halfVec, bumpVec.xyz));
	specular = pow(specular, 16)* lightColor.w * spotColor.w;
	
	oColor.xyz =	diffuse * dot(lightVec, bumpVec.xyz) *	lightColor.xyz * spotColor.xyz
					+ (specular * tex2D(specularMap, uv).xyz);
	oColor.xyz *= attenuation * rejectNeg;
}
